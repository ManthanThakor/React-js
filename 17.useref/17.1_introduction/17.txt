================================================================
$ useRef

- useRef is a React Hook that lets you reference a value thatâ€™s not needed for rendering.

const ref = useRef(initialValue)
================================================================
$ Reference

useRef(initialValue)
================================================================
$ Usage

- Referencing a value with a ref
- Manipulating the DOM with a ref
- Avoiding recreating the ref contents
================================================================
$ Does Not Cause Re-renders

- If we tried to count how many times our application renders using the useState Hook, we would be caught in an infinite loop since this Hook itself causes a re-render.
- To avoid this, we can use the useRef Hook.
================================================================


// Tracking State Changes
// The useRef Hook can also be used to keep track of previous state values.

// This is because we are able to persist useRef values between renders.

// Example:
// Use useRef to keep track of previous state values:

import { useState, useEffect, useRef } from "react";

function Tracking() {
  const [inputValue, setInputValue] = useState("");
  const previousInputValue = useRef("");

  useEffect(() => {
    previousInputValue.current = inputValue;
  }, [inputValue]);

  return (
    <>
      <input
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
      />
      <h2>Current Value: {inputValue}</h2>
      <h2>Previous Value: {previousInputValue.current}</h2>
    </>
  );
}

export default Tracking;

================================================================

// Accessing DOM Elements
// In general, we want to let React handle all DOM manipulation.

// But there are some instances where useRef can be used without causing issues.

// In React, we can add a ref attribute to an element to access it directly in the DOM.

// Example:
// Use useRef to focus the input:

import { useRef } from "react";

function Accsess() {
  const inputElement = useRef();

  const focusInput = () => {
    inputElement.current.focus();
  };

  return (
    <>
      <input type="text" ref={inputElement} />
      <button onClick={focusInput}>Focus Input</button>
    </>
  );
}

export default Accsess;

================================================================
================================================================


